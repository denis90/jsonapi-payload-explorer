{"version":3,"sources":["PayloadSample.js","compoments/JSONEditor.js","compoments/Tree.js","utils/serialize_to_tree.js","compoments/Viewer.js","App.js","utils/is-json-string.js","index.js"],"names":["PayloadSample","JSONEditor","react_default","a","createElement","className","this","props","Codemirror_default","value","payload","onChange","onPayloadChanged","options","lineNumbers","mode","name","json","theme","React","Component","Tree","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","treeData","root","_this2","index_esm","canDrag","setState","serializeObject","data","included","object","title","type","id","temp-id","attributes","method","children","relationships","key","relationshipData","Array","isArray","_object$children","map","relationship","serializeRelationship","push","apply","toConsumableArray","child","tempId","find","findInIncluded","Viewer","JSON","parse","_","rootObject","Tree_Tree","App","payloadSample","invalid","bind","assertThisInitialized","str","isJSONString","JSONEditor_JSONEditor","cx","Viewer_Viewer","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.ed1a9b16.chunk.js","sourcesContent":["export default `{\n  \"data\": {\n    \"type\": \"articles\",\n    \"attributes\": {\n      \"title\": \"Sideposting with json:api\"\n    },\n    \"relationships\": {\n      \"tags\": {\n        \"data\": [{ \"type\": \"tags\", \"id\": \"9\" },\n                 { \"type\": \"tags\", \"temp-id\": \"1\" },\n                 { \"type\": \"tags\", \"temp-id\": \"2\" }]\n      }\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"tags\",\n      \"temp-id\": \"1\",\n      \"attributes\": {\n        \"label\": \"JSON\"\n      }\n    },\n    {\n      \"type\": \"tags\",\n      \"temp-id\": \"2\",\n      \"attributes\": {\n        \"label\": \"REST\"\n      }\n    }\n  ]\n}`;\n","import React from 'react';\n\nimport CodeMirror from 'react-codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/solarized.css';\n\nimport './JSONEditor.css';\n\nexport default class JSONEditor extends React.Component {\n  render() {\n    return(\n      <div className={this.props.className}>\n        <CodeMirror\n          value={this.props.payload}\n          onChange={this.props.onPayloadChanged}\n          options={{\n            lineNumbers: true,\n            mode: { name: \"javascript\", json: true },\n            theme: 'solarized'\n          }}\n        />\n      </div>\n    );\n  }\n\n  styles: {\n  }\n}\n","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\n\nexport default class Tree extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {treeData: [this.props.root]};\n  }\n\n  render() {\n    return (\n      <SortableTree\n        canDrag={false}\n        treeData={this.state.treeData}\n        onChange={(treeData) => this.setState({ treeData })}\n      />\n    );\n  }\n}\n","export default function serializeToTree(object) {\n  if (!object.data) return {};\n  return serializeObject(object.data, object.included || []);\n}\n\nfunction serializeObject(data, included) {\n  let object = {\n    title: data.type,\n    id: data.id,\n    'temp-id': data['temp-id'],\n    type: data.type,\n    attributes: data.attributes,\n    method: data.method,\n    children: []\n  };\n\n  let { relationships } = data;\n\n  for (let key in relationships) {\n    let relationshipData = relationships[key][\"data\"];\n\n    if (Array.isArray(relationshipData)) {\n      let children = relationshipData.map((relationship) => (\n        serializeRelationship(relationship, included)\n      ));\n      object.children.push(...children);\n    } else {\n      let child = serializeRelationship(relationshipData, included);\n      object.children.push(child);\n    }\n  }\n\n  return object;\n}\n\nfunction serializeRelationship(data, included) {\n  let relationshipData = findInIncluded(data, included) || data;\n  let relationship = serializeObject(relationshipData, included);\n\n  if (!relationship.method) relationship.method = data.method;\n\n  return relationship;\n}\n\nfunction findInIncluded(data, included) {\n  let { id, type, 'temp-id': tempId } = data;\n\n  if (!!id) {\n    return included.find((data) => data.type === type && data.id === id);\n  } else if (!!tempId) {\n    return included.find((data) => data.type === type && data['temp-id'] === tempId);\n  }\n\n  return null;\n}\n","import React, { Component } from 'react';\nimport Tree from './Tree';\n\nimport serializeToTree from '../utils/serialize_to_tree';\n\nexport default class Viewer extends Component {\n  render() {\n    let json = {};\n    try {\n      json = JSON.parse(this.props.payload);\n    } catch(_) {};\n    let rootObject = serializeToTree(json);\n\n    return(\n      <div className={this.props.className}>\n        <Tree root={rootObject} key={this.props.payload}/>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport cx from 'classnames';\n\nimport payloadSample from './PayloadSample.js';\nimport isJSONString from './utils/is-json-string';\nimport JSONEditor from './compoments/JSONEditor';\nimport Viewer from './compoments/Viewer';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { payload: payloadSample, invalid: false };\n    this.onPayloadChanged = this.onPayloadChanged.bind(this);\n  }\n\n  onPayloadChanged(payload) {\n    if (!payload) { payload = '{}'; }\n    let invalid = !isJSONString(payload);\n    this.setState({ payload, invalid });\n  }\n\n  render() {\n    let { invalid } = this.state;\n\n    return(\n      <div className=\"App\">\n        <JSONEditor\n          className={ cx(\"sidepane\", { invalid }) }\n          payload={this.state.payload}\n          onPayloadChanged={this.onPayloadChanged} />\n\n        <Viewer className=\"sidepane\" payload={this.state.payload}/>\n      </div>\n    );\n  }\n}\n","export default function isJSONString(str) {\n  if(typeof(str) !== 'string') return false;\n  try { JSON.parse(str); } catch (_) { return false; }\n  return true;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}